You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Explanation: The arrays we are merging are [1,2,3] and [2,5,6].
The result of the merge is [1,2,2,3,5,6] with the underlined elements coming from nums1.



import java.util.Arrays;

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int[] temp = new int[m + n]; 
        int i = 0, j = 0, p = 0;

        // Merge arrays until one is exhausted
        while (i < m && j < n) {
            if (nums1[i] <= nums2[j]) {
                temp[p] = nums1[i];
                i++;
            } else {
                temp[p] = nums2[j];
                j++;
            }
            p++;
        }

        // Copy remaining elements from nums1
        while (i < m) {
            temp[p] = nums1[i];
            i++;
            p++;
        }

        // Copy remaining elements from nums2
        while (j < n) {
            temp[p] = nums2[j];
            j++;
            p++;
        }

        // Copy back to nums1
        for (int k = 0; k < m + n; k++) {
            nums1[k] = temp[k];
        }
    }
}

